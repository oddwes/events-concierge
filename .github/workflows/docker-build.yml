name: Docker Build and Deploy

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Version tag to build (e.g. v1.0.1)'
        required: true
  workflow_run:
    workflows: ["Auto Tag"]
    types:
      - completed

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get tag
        id: get-tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT
          else
            echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          fi

      - name: Create .env file
        run: |
          echo "DAEMON_PROCESS=true" >> .env
          echo "NODE_ENV=production" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
          echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> .env
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> .env
          echo "GOOGLE_PROJECT_ID=${{ secrets.GOOGLE_PROJECT_ID }}" >> .env
          echo "GOOGLE_PRIVATE_KEY_ID=${{ secrets.GOOGLE_PRIVATE_KEY_ID }}" >> .env
          echo "GOOGLE_PRIVATE_KEY=${{ secrets.GOOGLE_PRIVATE_KEY }}" >> .env
          echo "GOOGLE_CLIENT_EMAIL=${{ secrets.GOOGLE_CLIENT_EMAIL }}" >> .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "GOOGLE_CLIENT_CERT_URL=${{ secrets.GOOGLE_CLIENT_CERT_URL }}" >> .env
          echo "RUDDERSTACK_WRITE_KEY=${{ secrets.RUDDERSTACK_WRITE_KEY }}" >> .env
          echo "RUDDERSTACK_DATA_PLANE_URL=${{ secrets.RUDDERSTACK_DATA_PLANE_URL }}" >> .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and export
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          load: true
          tags: |
            438465133266.dkr.ecr.us-east-2.amazonaws.com/events-concierge:latest
            438465133266.dkr.ecr.us-east-2.amazonaws.com/events-concierge:${{ steps.get-tag.outputs.TAG }}

      - name: Push to ECR
        run: |
          docker push 438465133266.dkr.ecr.us-east-2.amazonaws.com/events-concierge:latest
          docker push 438465133266.dkr.ecr.us-east-2.amazonaws.com/events-concierge:${{ steps.get-tag.outputs.TAG }}

      - name: Force new ECS deployment
        run: |
          aws ecs update-service --cluster events-concierge-cluster --service events-concierge-service --force-new-deployment --region us-east-2